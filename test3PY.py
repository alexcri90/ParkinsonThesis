# -*- coding: utf-8 -*-
"""Test3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QuV0FMz6JKzMnSfq0pr51zaPNHaZ1aHn
"""



# Commented out IPython magic to ensure Python compatibility.
# %pip install scipy

import os
import pydicom
import matplotlib.pyplot as plt
import numpy as np

def explore_dicom(filepath):
    """
    Explore a DICOM file and display its key metadata and image content.

    Args:
        filepath (str): Path to the DICOM file
    """
    # Read DICOM file
    ds = pydicom.dcmread(filepath)

    # Display basic metadata
    print(f"\nFile: {os.path.basename(filepath)}")
    print("-" * 50)
    print(f"Patient ID: {ds.PatientID if 'PatientID' in ds else 'N/A'}")
    print(f"Study Date: {ds.StudyDate if 'StudyDate' in ds else 'N/A'}")
    print(f"Modality: {ds.Modality if 'Modality' in ds else 'N/A'}")
    print(f"Manufacturer: {ds.Manufacturer if 'Manufacturer' in ds else 'N/A'}")
    print(f"Image Size: {ds.Rows}x{ds.Columns}")

    # Get pixel array and display basic statistics
    img = ds.pixel_array
    print(f"\nImage Statistics:")
    print(f"Shape: {img.shape}")
    print(f"Data type: {img.dtype}")
    print(f"Min value: {np.min(img)}")
    print(f"Max value: {img.max()}")
    print(f"Mean value: {np.mean(img):.2f}")

    # Display image
    plt.figure(figsize=(10, 5))
    plt.imshow(img, cmap='gray')
    plt.colorbar()
    plt.title(f"DICOM Image: {os.path.basename(filepath)}")
    plt.axis('off')
    plt.show()

    return ds, img

# Explore images in the Images folder
image_folder = "Images"
image_files = [f for f in os.listdir(image_folder) if f.endswith('.dcm')]

for image_file in image_files:
    filepath = os.path.join(image_folder, image_file)
    ds, img = explore_dicom(filepath)

import os
import pydicom
import matplotlib.pyplot as plt
import numpy as np

def explore_dicom(filepath):
    """
    Explore a DICOM file and display its key metadata and image content.

    Args:
        filepath (str): Path to the DICOM file
    """
    # Read DICOM file
    ds = pydicom.dcmread(filepath)

    # Display basic metadata
    print(f"\nFile: {os.path.basename(filepath)}")
    print("-" * 50)
    print(f"Patient ID: {ds.PatientID if 'PatientID' in ds else 'N/A'}")
    print(f"Study Date: {ds.StudyDate if 'StudyDate' in ds else 'N/A'}")
    print(f"Modality: {ds.Modality if 'Modality' in ds else 'N/A'}")
    print(f"Manufacturer: {ds.Manufacturer if 'Manufacturer' in ds else 'N/A'}")
    print(f"Image Size: {ds.Rows}x{ds.Columns}")

    # Get pixel array and display basic statistics
    img = ds.pixel_array
    print(f"\nImage Statistics:")
    print(f"Shape: {img.shape}")
    print(f"Data type: {img.dtype}")
    print(f"Min value: {np.min(img)}")
    print(f"Max value: {img.max()}")
    print(f"Mean value: {np.mean(img):.2f}")

    # Display image
    if len(img.shape) == 3:
        # For 3D images, show middle slice
        middle_slice = img.shape[0] // 2
        plt.figure(figsize=(15, 5))

        # Show three different slices
        plt.subplot(131)
        plt.imshow(img[middle_slice - 10], cmap='gray')
        plt.colorbar()
        plt.title(f"Slice {middle_slice - 10}")
        plt.axis('off')

        plt.subplot(132)
        plt.imshow(img[middle_slice], cmap='gray')
        plt.colorbar()
        plt.title(f"Middle Slice {middle_slice}")
        plt.axis('off')

        plt.subplot(133)
        plt.imshow(img[middle_slice + 10], cmap='gray')
        plt.colorbar()
        plt.title(f"Slice {middle_slice + 10}")
        plt.axis('off')
    else:
        plt.figure(figsize=(10, 5))
        plt.imshow(img, cmap='gray')
        plt.colorbar()
        plt.title(f"DICOM Image: {os.path.basename(filepath)}")
        plt.axis('off')

    plt.tight_layout()
    plt.show()

    return ds, img

# Explore images in the Images folder
image_folder = "Images"
image_files = [f for f in os.listdir(image_folder) if f.endswith('.dcm')]

for image_file in image_files:
    filepath = os.path.join(image_folder, image_file)
    ds, img = explore_dicom(filepath)

import os
import pydicom
import matplotlib.pyplot as plt
import numpy as np

def explore_dicom(filepath):
    """
    Explore a DICOM file and display its key metadata and image content along all three axes.

    Args:
        filepath (str): Path to the DICOM file
    """
    # Read DICOM file
    ds = pydicom.dcmread(filepath)

    # Display basic metadata
    print(f"\nFile: {os.path.basename(filepath)}")
    print("-" * 50)
    print(f"Patient ID: {ds.PatientID if 'PatientID' in ds else 'N/A'}")
    print(f"Study Date: {ds.StudyDate if 'StudyDate' in ds else 'N/A'}")
    print(f"Modality: {ds.Modality if 'Modality' in ds else 'N/A'}")
    print(f"Manufacturer: {ds.Manufacturer if 'Manufacturer' in ds else 'N/A'}")
    print(f"Image Size: {ds.Rows}x{ds.Columns}")

    # Get pixel array and display basic statistics
    img = ds.pixel_array
    print(f"\nImage Statistics:")
    print(f"Shape: {img.shape}")
    print(f"Data type: {img.dtype}")
    print(f"Min value: {np.min(img)}")
    print(f"Max value: {img.max()}")
    print(f"Mean value: {np.mean(img):.2f}")

    if len(img.shape) == 3:
        # Get middle slices for each axis
        z_mid, y_mid, x_mid = [shape//2 for shape in img.shape]

        fig, axes = plt.subplots(1, 3, figsize=(15, 5))

        # Axial view (top-down)
        axes[0].imshow(img[z_mid], cmap='gray')
        axes[0].set_title(f'Axial (z={z_mid})')
        axes[0].axis('off')

        # Coronal view (front-back)
        axes[1].imshow(img[:, y_mid, :], cmap='gray')
        axes[1].set_title(f'Coronal (y={y_mid})')
        axes[1].axis('off')

        # Sagittal view (side)
        axes[2].imshow(img[:, :, x_mid], cmap='gray')
        axes[2].set_title(f'Sagittal (x={x_mid})')
        axes[2].axis('off')

        plt.suptitle(f"DICOM Image: {os.path.basename(filepath)}")
        plt.tight_layout()
        plt.show()
    else:
        plt.figure(figsize=(10, 5))
        plt.imshow(img, cmap='gray')
        plt.colorbar()
        plt.title(f"2D DICOM Image: {os.path.basename(filepath)}")
        plt.axis('off')
        plt.show()

    return ds, img

# Explore images in the Images folder
image_folder = "Images"
image_files = [f for f in os.listdir(image_folder) if f.endswith('.dcm')]

for image_file in image_files:
    filepath = os.path.join(image_folder, image_file)
    ds, img = explore_dicom(filepath)

import numpy as np
import pydicom
from pathlib import Path
from typing import Tuple, Dict
from scipy import ndimage
import matplotlib.pyplot as plt
import os

class DaTScanPreprocessor:
    def __init__(self, target_shape: Tuple[int, int, int] = (128, 128, 128)):
        self.target_shape = target_shape

    def load_and_preprocess(self, file_path: str) -> Dict:
        """Load and preprocess a single DaTSCAN SPECT image"""
        ds = pydicom.dcmread(file_path)
        img = ds.pixel_array.astype(float)

        # Basic preprocessing
        processed_img = self._preprocess_volume(img)

        # Extract key views
        mid_slices = self._extract_mid_slices(processed_img)

        return {
            'volume': processed_img,
            'mid_slices': mid_slices,
            'metadata': self._extract_metadata(ds)
        }

    def _preprocess_volume(self, img: np.ndarray) -> np.ndarray:
        """Preprocess 3D SPECT volume"""
        # Normalize intensity
        img = (img - np.min(img)) / (np.max(img) - np.min(img))

        # Apply Gaussian smoothing to reduce noise (common in SPECT)
        img = ndimage.gaussian_filter(img, sigma=0.8)

        # Resize if needed
        if img.shape != self.target_shape:
            zoom_factors = tuple(t/c for t, c in zip(self.target_shape, img.shape))
            img = ndimage.zoom(img, zoom_factors, order=3)

        return img

    def _extract_mid_slices(self, img: np.ndarray) -> Dict[str, np.ndarray]:
        """Extract middle slices from all three views"""
        z, y, x = [shape//2 for shape in img.shape]

        return {
            'axial': img[z],      # Top-down view, most important for striatum
            'coronal': img[:, y], # Front-back view
            'sagittal': img[:, :, x]  # Side view
        }

    def _extract_metadata(self, ds: pydicom.dataset.FileDataset) -> Dict:
        """Extract relevant SPECT-specific metadata"""
        return {
            'patient_id': getattr(ds, 'PatientID', 'unknown'),
            'study_date': getattr(ds, 'StudyDate', 'unknown'),
            'manufacturer': getattr(ds, 'Manufacturer', 'unknown'),
            'scanner_model': getattr(ds, 'ManufacturerModelName', 'unknown'),
            'pixel_spacing': getattr(ds, 'PixelSpacing', None),
            'slice_thickness': getattr(ds, 'SliceThickness', None)
        }

    def visualize_slices(self, processed_data: Dict):
        """Visualize the three main views of the SPECT image"""
        fig, axes = plt.subplots(1, 3, figsize=(15, 5))
        views = ['axial', 'coronal', 'sagittal']

        for ax, view in zip(axes, views):
            ax.imshow(processed_data['mid_slices'][view], cmap='hot')
            ax.set_title(f'{view.capitalize()} View')
            ax.axis('off')

        plt.tight_layout()
        plt.show()

# Usage example
if __name__ == "__main__":
    preprocessor = DaTScanPreprocessor()
    # List all DICOM files in Images folder
    image_folder = "Images"
    image_files = [f for f in os.listdir(image_folder) if f.endswith('.dcm')]

    for image_file in image_files:
        file_path = os.path.join(image_folder, image_file)

    try:
        processed_data = preprocessor.load_and_preprocess(file_path)
        preprocessor.visualize_slices(processed_data)
    except Exception as e:
        print(f"Error processing file: {e}")